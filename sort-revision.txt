Observer Design Pattern
Mutation Observer Pattern
Intersection observer

Set Object
Array fill
Mouse pos: x,y to window edge



onhashchange event

navigator.onLine
window.addEventListener('online', () => {})

padStart(targetLength, padString)
padEnd(targetLength, padString)

Function.prototype.call(thisArg, arg1, arg2, arg3);
Function.prototype.apply(thisArg, [argsArray]);             : Math.max.apply(null, numbers);

String.prototype.repeat()

console.time
console.log
console.table
console output stying           : '%cSomeText%cAnotherText', 'color:red', 'color:green'
Enum type (!)                   : Enums are not supported in JavaScript natively, Enums by nature can't be changed.
Custom Even                     : new CustomEvent()  ? https://www.javascripttutorial.net/javascript-dom/javascript-custom-events/#:~:text=Why%20using%20custom%20events,to%20the%20same%20custom%20event.
new FormData();                 : append(), delete(), entries(), get(), getAll(), has(), keys(), set(), values()

xml request                     : (onload, onreadystatechange, status)
xhr.send(new FormData(data))    : ?
xml                             : post request
xml                             : get request
xml                             : submit
xml                             : new URLSearchParams({})
xml                             : FormData
xml                             :          file upload
xml                             : multiple file upload
xml                             :          image load 
xml                             : multiple image load (no bad user experiance)
xml                             : wrap promise
xml                             : chaingin ???????
xml                             : send encoding data / image

element.parentNode              : get parentNode
Node.insertBefore()             : ParentElement(newElement, childElement)
Node.insertAdjacentElement('beforebegin', newEle);
Node.insertAdjacentElement('afterbegin', newEle);
Node.insertAdjacentElement('beforeend', newEle);
Node.insertAdjacentElement('afterend', newEle);
Node.append                     : Node.append(Node / 'textNode');
Node.appendChild(Node);         : only node
Node.nextSibling                : text(included enter, space, text), node
Node.nextElementSibling         : node
Node.previousSibling            : text(included enter, space, text), node
Node.previousElementSibling     : node
Node.cloneNode([deep])          : true-Infinity Dept / number
Node.getBoundingClientRect()    : constainSomeProperty( x, y, width, height, top, right, bottom, left)
Node.outerHTML
Node.innerHTML
Node.contains()                 : document.body.contains(node);
Node.childNodes                 : LIVE Node list, 
Node.isEqualNode(otherNode)     : check equal tagName, tagAttributes, nodeValue, all nested node element and textNode( read: spaces, enters )

ParentNode.prepend()            : ParentNode.prepend(strong, em, 'text node');  :: accept multiple node

Element.toggleAttribute()       : Element.toggleAttribute(name [, force]);      :: force-accept boolean
Element.setAttribute()          : Element.setAttribute(name, value);
Element.getAttribute()          : Element.getAttribute(attributeName);
Element.hasAttribute()          : Element.hasAttribute(name);
Element.removeAttribute()       : Element.removeAttribute(attrName);


DOMTokenList.contains()         : Node.classList.constains('ClassName');


localStorage()                  : 
document.execCommand("Copy")    : DEPRACATED - selected text copy into clipboard
Function.prototype.bind()


Event                           : onfocus
Event                           : blur
Event                           : transitionend
Event                           : beforeunload
Event                           : unload
Event                           : DOMContentLoaded
Event                           : visibilitychange                  :: document.visibilityState     resutl: hidden / visible
                                                                    :: document.hidden              result: true / false

Event                           : dragstart
Event                           : dragover                          :: Default action: Reset the current drag operation to "none".
Event                           : dragleave
Event                           : drop
Event Handlar Pro.              : e.stopPropagation()               :: box.click, btn.click{ stopProp() }
Event Handlar Pro.              : e.getModifierState()              :: bool = e.getModifierState('CapsLock');

bubbling                        : targetElement -> parentElement -> body -> html
capturing                       : html -> body -> parentElement -> targetElement

Window.parent                   : window.parent.document.getElementById(elementId)
Math.random()                   : Math.ceil( Math.random() * 9 )
String.fromCharCode             : utf-16 to string

Object.assign()                 : Object.assign(target, ...sources)
                                : Warning for Deep Clone
                                : Merging objects with same properties
                                : Primitives will be wrapped to objects

onscroll                        : handles onscroll handles scrolling of an object's content.
                                : Node.onscroll = () => e.target.scrollTop
onwheel                         : handles general wheel rotation

parser.parseFromString(`html -> body -> node -> ...`)

break nested loop               : labels: { { break } }
add multiple css                : Node.style.cssText
custom error                    : throw new Error('opps something went wrong');
clickable table                 : add click event on each row and {window.location.href = rowElement.dataset.href}
change iframe content           : iframe.contentWindow/iframe.contentDocument
how to vibrate mobile           : navigator.vibrate(ms/[ms])
Own Promise                     : fun () { r new Promise((reso, reje)=> {})  }
aggregate multiple promises     : Promise.all([fetchRes1, fetchRes2]).then( (v) => Promise.all( v.map( res => res.json ) ) ).then(([resTxt1, resTxt2]) => .. , ..) .. 
Node bg red contain or not      : window.getComputedStyle(h1/::after)
change JSON output              : obj = {.., .., toJSON() {`this.a, this,b`}}
base64 encoding ex!             : btoa('string')
base64 decoding ex!             : atob(encodedBase64)
sendData Between tabs           : new BroadcastChannel('xyz'); 
                                : Handle incoming messages => Event: 'message' {log e} // 
                                : Send message             => bc.postMessage( str / arr / obj / new Blob(['string txt'], {type: 'text/plain}) )
                                : Disconnect the channel   => bc.close();
use session storage             : sessionStroage.setItem/getIteam/removeIteam/clear

how to use fromEntires          : Object.fromEntries(entiresMap);
how to use entires              : Object.fromEntries( obj );

where use url construc..        : new URL('url')
                                : new URL('addPath', 'url')
                                : Properties ( hash, host, hostname, href, origin 'Read only', password, pathname, protocol, search, username )

object seal                     : Object.seal(obj)
                                : preventing new properties
                                : marking all existing properties as non-configurable (Values of present properties can still be changed as long as they are writable.)

object freeze                   : Object.freeze(obj)
                                : It prevents modifying any existing properties
                                : Neither one affects 'deep'/grandchildren objects. E.g.,
                                : if obj is frozen, obj.el can’t be reassigned,
                                : but the value of obj.el could be modified,
                                : e.g. obj.el.id can be changed.

double arrVal Arrayform         : Array.from([1, 2, 3], x => x + x);      
genrate number 0 to 4           : Array.from({length: 5}, (v, i) => i); // [0, 1, 2, 3, 4]
notification permission         : Notification.requestPermission().then(per => fun())
set a notification              : fun : new Notification('msg', { body: 'body msg', icon: 'url'});
clicking a notification         : notification.onclick() => window.location.href = url;
fullscreen api                  : working only user gesture
                                : onclick: if(document.fullscreenElement) { document.exitFullscreen() } else { element.requestFullscreen().catch(console.log) }

Dynamic Import                  : await import(moudlePath).then(modul=>modul.method(xyz)).catch(err=>console.log)
Smooth scroll/Jump scroll       : window.scrollTo( {top: pos, left: pos, behavior: 'smooth' });
get element from x/y coord      : document.elementFromPoint(70, 127);
String.prototype.replace()      : str.replace(regexp|substr, newSubstr|function)
Array element copy with in      : arr.copyWithin(target, start point, End point);
Nullish coalescing       ??     : leftExpr ?? rightExpr             :: returning the second operand when the first one evaluates (0, '', NaN, null, undefined) (but no other falsy values)
boolean logical operator ||     : leftExpr ?? rightExpr             :: returning the second operand when the first one evaluates to either null or undefined (but no other falsy values)
singleton page navigation       : history.length                    :: get current length of page history
                                : history.back()                    :: go backward          
                                : history.forward()                 :: go forward           
                                : history.go(1)                     :: Positive value mean: go forward   
                                : history.go(-2)                    :: Positive value mean: go backward
                                : history.go(0)                     :: ZERO mean : refresh current page
                                : history.pushState(anyData, title, string)
                                : history.replaceState(anyData, title, string)

HTMLInputElement.setSelectionRange() : element.setSelectionRange(selectionStart, selectionEnd [, selectionDirection]);
                                     : selectionStart               :: The 0-based index
                                     : selectionEnd                 :: The 0-based index
                                     : selectionDirection(opt.)     :: forward
                                                                    :: backward
                                                                    :: none
FileReader Object               : asynchronously read the contents of files (or raw data buffers)
                                : Returns a newly constructed FileReader.
                                : store data user pc using file and blob object

                                : ᗐ Related Objects ᗐ
                                : FileList Object                   :: returned as a result of a user selecting files using the <input> element
                                                                    :: Property - name, size, type
                                : DataTransfer Object               :: from a drag and drop operation's
                                : mozGetAsFile() API                :: on an HTMLCanvasElement.

                                : ᗐ Properties ᗐ
                                : FileReader.error
                                : FileReader.readyState             :: EMPTY	  0  No data has been loaded yet.
                                                                    :: LOADING 1  Data is currently being loaded.
                                                                    :: DONE    2  The entire read request has been completed.
                                : FileReader.result                 :: property only valid after the read operation is complete,
                                                                    :: format of the data depends on which of the methods was used to initiate the read operation.
                                : ᗐ Event handlers ᗐ
                                : FileReader.onabort                :: This event is triggered each time the reading operation is aborted.
                                : FileReader.onerror                :: This event is triggered each time the reading operation encounter an error.
                                : FileReader.onload                 :: This event is triggered each time the reading operation is successfully completed.
                                : FileReader.onloadstart            :: This event is triggered each time the reading is starting.
                                : FileReader.onloadend              :: This event is triggered each time the reading operation is completed (either in success or failure).
                                : FileReader.onprogress             :: A handler for the progress event. This event is triggered while reading a Blob content.

                                : ᗐ Method ᗐ
                                : FileReader.abort()                :: Aborts the read operation. Upon return, the readyState will be DONE.
                                : FileReader.readAsArrayBuffer()    :: Starts reading the contents of the specified Blob, once finished, the result attribute contains an ArrayBuffer representing the file's data.
                                : FileReader.readAsBinaryString()   :: Starts reading the contents of the specified Blob, once finished, the result attribute contains the raw binary data from the file as a string.
                                : FileReader.readAsDataURL()        :: Starts reading the contents of the specified Blob, once finished, the result attribute contains a data: URL representing the file's data.
                                : FileReader.readAsText()           :: Starts reading the contents of the specified Blob, once finished, the result attribute contains the contents of the file as a text string. An optional encoding name can be specified.
Accessing selected file(s)      : 
Accessing selected file(s) on a change event

string start begin or not       : str.startsWith(searchString[, position])
                                : return true and false
                                : This method is case-sensitive.

regexp.exec() / String.match(re): return array or null  (REGEXP, MATCH - BOTH are same work) : only dirfference is 'match' is not supported g flag
                                : [0]                               :: The full string of characters matched
                                : [1 and more]                      :: The parenthesized substring matches, (unlimited matches)
                                : index                             :: The 0-based index of the match in the string. The original string that was matched against.

DifferenceBetween 'exec','match': 1. string.match finds the first match and returns it with the actual match,
                                :    the index at which the text was found and the actual input,
                                :    when the BLOBAL FLAG is not used.
                                : 2. string.match just returns all the matches,
                                :    when the BLOBAL FLAG is used.



Object.defineProperty           : Object.defineProperty(obj, prop, descriptor)

                                : configurable attribute            :: Defaults to false.
                                                                    :: true if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object.
                                                                    :: Defaults to false.   :- defineProperty
                                                                    :: Defaults to true.    :- object Default
                                                                    
                                                                    :: defineProperty get() configurable: false  
                                                                    :: defineProperty       configurable: true   // throws a TypeError
                                                                    :: defineProperty       enumerable:   true   // throws a TypeError
                                                                    :: defineProperty get()                      // throws a TypeError
                                                                    :: defineProperty set()                      // throws a TypeError
                                                                    :: defineProperty value: 12                  // throws a TypeError
                                                                    :: delete o.a;                               // Nothing happens

                                : enumerable attribute              :: Defaults to false.   :- defineProperty
                                                                    :: Defaults to true.    :- object Default
                                                                    :: true if and only if this property shows up during enumeration of the properties on the corresponding object.                                                                    
                                                                    :: obj.propertyIsEnumerable('PropertyName')

                                                                    :: 'a' defineProperty enumerable: true                     // true
                                                                    :: 'b' defineProperty enumerable: false                    // false
                                                                    :: 'c' defineProperty 'defaultIs'                          // false
                                                                    :: 'd' object.d = 4                                        // true
                                                                    :: 'e' defineProperty Symbol.for('e') enumerable: true     // false
                                                                    :: 'f' defineProperty Symbol.for('f') enumerable: false    // false

                                                                    :: Result of Shallow Copy
                                                                    :: 'a' // 1
                                                                    :: 'b' // undefined
                                                                    :: 'c' // undefined
                                                                    :: 'd' // 4
                                                                    :: 'e' // 5
                                                                    :: 'f' // undefined

                                                                    :: Result of deep Copy
                                                                    :: 'a' // 1
                                                                    :: 'b' // undefined
                                                                    :: 'c' // undefined
                                                                    :: 'd' // 4
                                                                    :: 'e' // undefined
                                                                    :: 'f' // undefined

                                : writable attribute                :: true if the value associated with the property may be changed with an assignment operator.
                                                                    :: Defaults to false.   :- defineProperty
                                                                    :: Defaults to true.    :- object Default

                                                                    :: defineProperty value: 37, writable: false  // after set writable false result in below
                                                                    :: o.a = 25; Without 'strict mode'            // No error thrown
                                                                    :: o.a = 25; In 'strict mode'                 // throws a TypeError

Gloable_Object Proxy            : The Proxy object enables you to create a proxy for another object,
                                : which can intercept and redefine fundamental operations for that object.

                                : ᗐ two parameters ᗐ
                                : target: the original object which you want to proxy
                                : handler: an object that defines which operations will be intercepted and how to redefine intercepted operations.
